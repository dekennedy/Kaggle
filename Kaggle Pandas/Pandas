

reviews.head()


first_description = reviews['description'].iloc[0]

# Check your answer
q2.check()
first_description


first_descriptions = reviews.description.head(10)
# Check your answer
q4.check()
first_descriptions


####

cols = ['country','variety']
df = reviews[cols].loc[:99]


italian_wines = reviews[reviews.country == 'Italy']




###################

df2 = reviews[(reviews.country =='Australia') | (reviews.country == 'New Zealand')]


top_oceania_wines = df2[df2.points >= 95]


# top_oceania_wines = reviews.loc[
#     (reviews.country.isin(['Australia', 'New Zealand']))
#     & (reviews.points >= 95)
#]




# Check your answer
q9.check()
top_oceania_wines


#Pandas Numer 3 

reviews.points.describe()        *summary stats ets. mean, max count
reviews.taster_name.unique()      #unique values in the DF


####Group by

reviews.groupby('points').points.count()

reviews.groupby(['country', 'province']).apply(lambda df: df.loc[df.points.idxmax()])

reviews.groupby(['country']).price.agg([len, min, max])

 countries_reviewed = reviews.groupby(['country', 'province']).description.agg([len])

countries_reviewed.reset_index()

countries_reviewed.sort_values(by='len', ascending=False)

countries_reviewed.sort_values(by=['country', 'len'])   ##Country then Len


best_rating_per_price = reviews.groupby('price')['points'].max().sort_index()

price_extremes = reviews.groupby(['variety']).price.agg([min, max])


####################################

#Data Types and Missing Values


reviews.price.dtype

reviews[pd.isnull(reviews.country)]
reviews.region_2.fillna("Unknown")
reviews.taster_twitter_handle.replace("@kerinokeefe", "@kerino")



















