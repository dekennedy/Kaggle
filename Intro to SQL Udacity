 The query below finds the names and birthdates of all the gorillas.
# 
# Modify it to make it find the names of all the animals that are not
# gorillas and not named 'Max'.
#

QUERY = '''
select name from animals where species != 'gorilla' and name != 'Max';
'''

QUERY = '''
select name from animals where species <> 'gorilla' and name <> 'Max';
'''

##
#
# Find all the llamas born between January 1, 1995 and December 31, 1998.
# Fill in the 'where' clause in this query.

QUERY = '''
select name from animals 
where species = 'llama' and 
birthdate >= '1995-01-01' 
and birthdate <= '1998-12-31';
'''


##############################################################################################
#####################################################################################################################################################
#####################################################################################
#####################################################################################


For reference, here's a list of all the tables in the zoo database:

animals
    This table lists individual animals in the zoo. Each animal has only one row. There may be multiple animals with the same name, or even multiple animals with the same name and species.
    name — the animal's name (example: 'George')
    species — the animal's species (example: 'gorilla')
    birthdate — the animal's date of birth (example: '1998-05-18')

diet
    This table matches up species with the foods they eat. Every species in the zoo eats at least one sort of food, and many eat more than one. If a species eats more than one food, there will be more than one row for that species.
    species — the name of a species (example: 'hyena')
    food — the name of a food that species eats (example: 'meat')

taxonomy
     This table gives the (partial) biological taxonomic names for each species in the zoo. It can be used to find which species are more closely related to each other evolutionarily.
     name — the common name of the species (e.g. 'jackal')
     species — the taxonomic species name (e.g. 'aureus')
     genus — the taxonomic genus name (e.g. 'Canis')
     family — the taxonomic family name (e.g. 'Canidae')
     t_order — the taxonomic order name (e.g. 'Carnivora')
     If you've never heard of this classification, don't worry about it; the details won't be necessary for this course. But if you're curious, Wikipedia articles Taxonomy and Biological classification may help.

ordernames
        This table gives the common names for each of the taxonomic orders in the taxonomy table.
        t_order — the taxonomic order name (e.g. 'Cetacea')
        name — the common name (e.g. 'whales and dolphins')


###############################################################################
###############################################################################
###############################################################################

Code for Table names


create table animals (  
       name text,
       species text,
       birthdate date);

create table diet (
       species text,
       food text);  

create table taxonomy (
       name text,
       species text,
       genus text,
       family text,
       t_order text); 

create table ordernames (
       t_order text,
       name text);

###############################################################################
###############################################################################
###############################################################################

                                              https://classroom.udacity.com/courses/ud197/lessons/3423258756/concepts/33885287060923

###############################################################################
###############################################################################


QUERY = "select max(name) from animals;"

QUERY = "select * from animals limit 10;"

QUERY = "select * from animals where species = 'orangutan' order by birthdate;"

QUERY = "select * from animals where species = 'orangutan' order by birthdate desc;"

QUERY = "select name, birthdate from animals order by name limit 10 offset 20;"

QUERY = "select name, species, min(birthdate) from animals group by species;"

QUERY = '''
select name, count(*) as num from animals
group by name
order by num desc
limit 10;
'''


###############################################################################


# Write a query that returns all the species in the zoo, and how many animals of
# each species there are, sorted with the most populous species at the top.
# 
# The result should have two columns:  species and number.
#
# The animals table has columns (name, species, birthdate) for each individual.



QUERY = '''
select species, count(*) as num from animals
group by species
order by num desc;


###############################################################################


SELECT_QUERY = '''
select name, species, birthdate from animals where species = 'opossum';
'''

## watch single quotes on strings 'jjdjd'


QUERY = '''
select animals.name
from animals, diet
where animals.species = diet.species and diet.food = 'fish';
'''

###############################################################################


QUERY = '''
select  diet.food, count(*) as num 
from animals, diet
where animals.species = diet.species
group by diet.food 
having num = 1

'''

select food, count(animals.name) as num
from diet, animals 
where diet.species = animals.species
group by food
having num = 1

###############################################################################

QUERY = '''
select ordernames.t_order , count(animals.name) as num
from animals, taxonomy, ordernames
where taxonomy.t_order = ordernames.t_order and animals.species = taxonomy.species
'''

QUERY = '''
select ordernames.name, count(*) as num
from animals, taxonomy, ordernames
where taxonomy.t_order = ordernames.t_order
and animals.species = taxonomy.name
group by ordernames.name
order by num desc
;
'''
'''

#####################################################################################



QUERY = '''
select *
from amimals
where name = 'Fred';
'''


#####################################################################################
Lesson 3 Starts Below
#####################################################################################
 
 
 
import sqlite3

# Fetch some student records from the database.
db = sqlite3.connect("students")
c = db.cursor()
query = "select name, id from students order by name;"
c.execute(query)
rows = c.fetchall()

# First, what data structure did we get?
print "Row data:"
print rows

# And let's loop over it too:
print
print "Student names:"
for row in rows:
  print "  ", row[0]

db.close()

################################################
##################



import datetime
import psycopg2
import bleach

DBNAME = "forum"


def get_posts():

	db = psycopg2.connect(database = DBNAME)
	c = db.cursor()
	c.execute("select content, time from posts order by time desc")
	posts = c.fetchall()	
	db.close()
	return posts


def add_post(content):

	db = psycopg2.connect(database = DBNAME)
	c = db.cursor()
	c.execute("insert into posts values (%s)", (bleach.clean(content),))
	db.commit()
	db.close()

##############################################################################################################

 # "Database code" for the DB Forum.

import datetime
import psycopg2
import bleach

DBNAME = "forum"



def get_posts():

	db = psycopg2.connect(database = DBNAME)
	c = db.cursor()
	c.execute("update posts set content = 'Cheese' where lower(content) like '%spam%' ")		# lower(content) takes soulves the case match issue.
	
	### add Code to Delete the Cheese Text
	
	c.exvute(" delete content from posts where content = 'Cheese' ")
	
	c.execute("delete from posts where content = 'Cheese' ")		
	
	c.execute("select content, time from posts order by time desc")
	posts = c.fetchall()	
	db.close()
	return posts




def add_post(content):

	db = psycopg2.connect(database = DBNAME)
	c = db.cursor()
	c.execute("insert into posts values (%s)", (bleach.clean(content),))
	db.commit()
	db.close()

####################################################################################################################################################################################################################################################################################################################################
		#Lesson 4 Below
########################################################################################################################################################################################################################





vagrant=> CREATE DATABASE sardines;
CREATE DATABASE
vagrant=> \c sardines
####You are now connected to database "sardines" as user "vagrant".
sardines=> CREATE TABLE FISH (
sardines(> text text,
sardines(> serial varchar );
####CREATE TABLE
sardines=> INSERT INTO FISH values ('This is text!');
###INSERT 0 1
sardines=>



################



## Join a table to itself

-- Roommate Finder v0.9
--
-- This query is intended to find pairs of roommates.  It almost works!
-- There's something not quite right about it, though.  Find and fix the bug.

select a.id, b.id, a.building, a.room
      from residences as a, residences as b
 where a.building = b.building
  and a.room = b.room
  and a.id <> b.id			## added to exclude matching with yourseld
  group by a.room			##added to take out doubles on room.
 order by a.building, a.room;

-- To see the complete residences table, comment out the query above,
-- uncomment this query and press "Test Run":

-- select id, building, room from residences;




##################


select programs.name, count(bugs.filename) as num
  from programs left join bugs				### get table to show a 0 
        on programs.filename = bugs.filename
  group by programs.name
  order by num;


##########


def lightweights(cursor):
    """Returns a list of the players in the db whose weight is less than the average."""
    cursor.execute("select name, weight from players, (select avg(weight) as av from players) as subq where weight < av;")
    return cursor.fetchall()


################################
























